import asyncio
import datetime
import logging
import time
from io import BytesIO

import matplotlib.pyplot as plt
import numpy as np
import requests  # –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup
from aiogram.utils import executor
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.dispatcher.handler import CancelHandler
from bs4 import BeautifulSoup

# ===== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è =====
API_TOKEN = "tgtoken"
CBR_API_URL = "https://www.cbr-xml-daily.ru/daily_json.js"
# –ù–æ–≤—ã–π API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤ (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–∫—É–ø–∫–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)
BANKI_API_URL = ("https://www.banki.ru/products/currencyNodejsApi/getBanksOrExchanges/"
                 "?sortAttribute=buy&order=asc&regionUrl=izhevsk&currencyId=840&amount=&page=1&pagePath=currencyCashCity")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# ===== Throttling Middleware (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π) =====
class ThrottlingMiddleware(BaseMiddleware):
    def __init__(self, limit=1):
        self.rate_limit = limit
        super().__init__()

    async def on_process_message(self, message: types.Message, data: dict):
        user_id = message.from_user.id
        current = asyncio.get_event_loop().time()
        last_time = dp.storage.data.get(user_id, 0)
        if current - last_time < self.rate_limit:
            try:
                await message.reply("–í—ã —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            raise CancelHandler()
        dp.storage.data[user_id] = current

dp.storage.data = {}
dp.middleware.setup(ThrottlingMiddleware(limit=1))

# ===== –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö =====
user_data = {}       # –î–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
subscribers = set()  # ID –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
alerts = {}          # –ë—É–¥–∏–ª—å–Ω–∏–∫–∏

logging.basicConfig(level=logging.INFO)

# ===== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é =====
def main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        "USD", "EUR", "JPY", "TRY", "RUB", "AED",
        "üìä –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è",
        "üîî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫", "üìâ –ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞",
        "üìä –õ—É—á—à–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∏ –≤ –ò–∂–µ–≤—Å–∫–µ",
        "üìã –ú–æ–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∏"
    ]
    keyboard.add(*buttons)
    return keyboard

# ===== –ö–æ–º–∞–Ω–¥–∞ /start =====
@dp.message_handler(commands=["start"])
async def start_command(message: Message):
    user_data.pop(message.from_user.id, None)
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())

# ===== –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç =====
@dp.message_handler(lambda message: message.text in ["USD", "EUR", "JPY", "TRY", "RUB", "AED"])
async def currency_selected(message: Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {}
    # –ï—Å–ª–∏ —É–∂–µ –≤–≤–µ–¥–µ–Ω–∞ —Å—É–º–º–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–ª–∞ —Å –∏—Å—Ö–æ–¥–Ω–æ–π
    if "amount" in user_data[user_id]:
        if user_data[user_id].get("from_currency") == message.text:
            await message.reply("‚ùå –í–∞–ª—é—Ç–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–π. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É:")
            return
        user_data[user_id]["to_currency"] = message.text
        await convert_currency(message)
    else:
        user_data[user_id]["from_currency"] = message.text
        await message.reply(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {message.text}. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")

def is_number(text: str) -> bool:
    try:
        float(text.replace(',', '.'))
        return True
    except ValueError:
        return False

@dp.message_handler(lambda message: message.from_user.id in user_data 
                    and "from_currency" in user_data[message.from_user.id] 
                    and "amount" not in user_data[message.from_user.id])
async def amount_selected(message: Message):
    t = message.text.replace(',', '.')
    try:
        float(t)
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã!", reply_markup=main_keyboard())
        return

    if '.' in t:
        _, fraction = t.split('.', 1)
        if len(fraction) > 2:
            await message.reply("‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Ç–æ—á–∫–∏. –ú–∞–∫—Å–∏–º—É–º 2 —Ü–∏—Ñ—Ä—ã –¥–æ–ø—É—Å—Ç–∏–º–æ.", reply_markup=main_keyboard())
            return

    amount = float(t)
    if amount <= 0:
        user_data.pop(message.from_user.id, None)
        await message.reply("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!", reply_markup=main_keyboard())
        return
    if amount < 0.01:
        user_data.pop(message.from_user.id, None)
        await message.reply("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 0.01!", reply_markup=main_keyboard())
        return
    if amount > 1_000_000_000:
        user_data.pop(message.from_user.id, None)
        await message.reply("‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –º–µ–Ω—å—à–µ 1,000,000,000.", reply_markup=main_keyboard())
        return

    user_data[message.from_user.id]["amount"] = amount
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º –≤–∞–ª—é—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º one_time_keyboard –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞—Ö
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttons = ["USD", "EUR", "JPY", "TRY", "RUB", "AED"]
    keyboard.add(*buttons)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:", reply_markup=keyboard)

async def convert_currency(message: Message):
    from_currency = user_data[message.from_user.id]["from_currency"]
    to_currency = user_data[message.from_user.id]["to_currency"]
    amount = user_data[message.from_user.id]["amount"]

    rates = get_exchange_rates()
    if not rates:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=main_keyboard())
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—É—Ä—Å–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, AED –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å)
    if rates.get(from_currency) is None or rates.get(to_currency) is None:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã.", reply_markup=main_keyboard())
        user_data.pop(message.from_user.id, None)
        return

    result = (amount * rates[from_currency]) / rates[to_currency]
    if 0 < result < 0.01:
        result_str = f"{result:.6f}"
    else:
        result_str = f"{result:.2f}"
    await message.reply(f"üí± {amount} {from_currency} = {result_str} {to_currency}", reply_markup=main_keyboard())
    user_data.pop(message.from_user.id, None)

def get_exchange_rates():
    try:
        response = requests.get(CBR_API_URL, timeout=10)
        response.raise_for_status()
        data = response.json()
        # –î–æ–±–∞–≤–ª—è–µ–º AED, –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ
        rates = {
            "USD": data["Valute"]["USD"]["Value"],
            "EUR": data["Valute"]["EUR"]["Value"],
            "JPY": data["Valute"]["JPY"]["Value"] / 100,
            "TRY": data["Valute"]["TRY"]["Value"],
            "RUB": 1.0,
            "AED": data["Valute"]["AED"]["Value"] if "AED" in data["Valute"] else None
        }
        return rates
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤: {e}")
        return None

# ===== –ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞ (USD –∫ RUB) —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–ø–∞–º–∞ =====
graph_currency_lock = {}
graph_currency_last_time = {}
GRAPH_CURRENCY_COOLDOWN = 30

def generate_currency_graph():
    currency = "USD"
    today = datetime.date.today()
    dates = []
    values = []
    for i in range(7):
        date = today - datetime.timedelta(days=i)
        date_str = date.strftime("%Y/%m/%d")
        url = f"https://www.cbr-xml-daily.ru/archive/{date_str}/daily_json.js"
        try:
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                data = response.json()
                if currency in data["Valute"]:
                    dates.append(date.strftime("%d.%m"))
                    values.append(data["Valute"][currency]["Value"])
        except Exception:
            continue

    if len(dates) < 2:
        raise Exception("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞.")
        
    plt.figure(figsize=(8, 4))
    plt.plot(dates[::-1], values[::-1], marker="o", linestyle="-", label=f"{currency} –∫ RUB")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–ö—É—Ä—Å")
    plt.title(f"üìâ –ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞ {currency} –∫ RUB")
    plt.legend()
    plt.grid(True)
    buf = BytesIO()
    plt.savefig(buf, format="png")
    buf.seek(0)
    plt.close()
    return buf.getvalue()

@dp.message_handler(lambda message: message.text == "üìâ –ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞")
async def send_currency_graph(message: Message):
    user_id = message.from_user.id
    current_time = asyncio.get_event_loop().time()

    if user_id in graph_currency_last_time and (current_time - graph_currency_last_time[user_id] < GRAPH_CURRENCY_COOLDOWN):
        await message.reply("–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∑–∞–ø—Ä–æ—Å—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        return
    graph_currency_last_time[user_id] = current_time

    if user_id not in graph_currency_lock:
        graph_currency_lock[user_id] = asyncio.Lock()
    lock = graph_currency_lock[user_id]

    if lock.locked():
        await message.reply("–í–∞—à –∑–∞–ø—Ä–æ—Å —É–∂–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        return

    async with lock:
        try:
            loop = asyncio.get_event_loop()
            image_bytes = await loop.run_in_executor(None, generate_currency_graph)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞.", reply_markup=main_keyboard())
            return
        await message.reply_photo(image_bytes, reply_markup=main_keyboard())

# ===== –ü–æ–¥–ø–∏—Å–∫–∞ =====
@dp.message_handler(lambda message: message.text == "üìä –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")
async def subscribe_command(message: Message):
    subscribers.add(message.from_user.id)
    await message.reply("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç!", reply_markup=main_keyboard())

@dp.message_handler(lambda message: message.text == "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è")
async def unsubscribe_command(message: Message):
    subscribers.discard(message.from_user.id)
    await message.reply("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.", reply_markup=main_keyboard())

# ===== –ë—É–¥–∏–ª—å–Ω–∏–∫–∏ =====
@dp.message_handler(lambda message: message.text == "üîî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫")
async def alert_start(message: Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `/alert USD 100.50`", reply_markup=main_keyboard())

@dp.message_handler(lambda message: message.text.lower().startswith("/alert"))
async def set_alert(message: Message):
    parts = message.text.split()
    if len(parts) < 3:
        await message.reply("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/alert USD 100.50`", reply_markup=main_keyboard())
        return
    currency = parts[1].upper()
    allowed_currencies = ["USD", "EUR", "JPY", "TRY", "RUB", "AED"]
    if currency not in allowed_currencies:
        await message.reply(f"‚ùå –í–∞–ª—é—Ç–∞ {currency} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –î–æ—Å—Ç—É–ø–Ω—ã: {', '.join(allowed_currencies)}", reply_markup=main_keyboard())
        return
    try:
        target_price = float(parts[2])
        rates = get_exchange_rates()
        if not rates or currency not in rates:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_keyboard())
            return
        current_rate = rates[currency]
        direction = "up" if target_price > current_rate else "down"
        user_id = message.from_user.id
        if user_id not in alerts:
            alerts[user_id] = []
        alerts[user_id].append({
            "currency": currency,
            "target": target_price,
            "direction": direction
        })
        await message.reply(f"üîî –ë—É–¥–∏–ª—å–Ω–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {currency} ‚Üí {target_price} RUB (–æ–∂–∏–¥–∞–µ–º {'—Ä–æ—Å—Ç–∞' if direction=='up' else '–ø–∞–¥–µ–Ω–∏—è'})", reply_markup=main_keyboard())
    except ValueError:
        await message.reply("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/alert USD 100.50`", reply_markup=main_keyboard())

@dp.message_handler(commands=["myalerts"])
@dp.message_handler(lambda message: message.text == "üìã –ú–æ–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∏")
async def view_alerts(message: Message):
    user_id = message.from_user.id
    if user_id not in alerts or not alerts[user_id]:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤.", reply_markup=main_keyboard())
        return
    text_lines = ["–í–∞—à–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∏:"]
    for idx, alert in enumerate(alerts[user_id], start=1):
        text_lines.append(f"{idx}. {alert['currency']} ‚Üí {alert['target']} RUB")
    text_lines.append("\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n`/delete_alert <–Ω–æ–º–µ—Ä>`")
    await message.reply("\n".join(text_lines), parse_mode="Markdown", reply_markup=main_keyboard())

@dp.message_handler(commands=["delete_alert"])
async def delete_alert(message: Message):
    parts = message.text.split()
    if len(parts) < 2:
        await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –±—É–¥–∏–ª—å–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/delete_alert 1`", reply_markup=main_keyboard())
        return
    try:
        index = int(parts[1]) - 1
        user_id = message.from_user.id
        if user_id not in alerts or index < 0 or index >= len(alerts[user_id]):
            await message.reply("‚ùå –ë—É–¥–∏–ª—å–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_keyboard())
            return
        removed = alerts[user_id].pop(index)
        await message.reply(f"‚úÖ –ë—É–¥–∏–ª—å–Ω–∏–∫ {removed['currency']} ‚Üí {removed['target']} RUB —É–¥–∞–ª—ë–Ω.", reply_markup=main_keyboard())
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/delete_alert 1`", reply_markup=main_keyboard())

# ===== –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ =====
async def daily_exchange_rates():
    while True:
        await asyncio.sleep(86400)
        rates = get_exchange_rates()
        if subscribers and rates:
            text = "üìä **–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:**\n" + "\n".join(f"üí∞ {c}: {v:.2f} RUB" for c, v in rates.items() if v is not None)
            for user_id in subscribers:
                try:
                    await bot.send_message(user_id, text, parse_mode="Markdown", reply_markup=main_keyboard())
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–ø–∏—Å—á–∏–∫—É {user_id}: {e}")

async def check_alerts():
    while True:
        await asyncio.sleep(5)
        rates = get_exchange_rates()
        if not rates:
            continue
        for user_id, user_alerts in list(alerts.items()):
            new_alerts = []
            for alert in user_alerts:
                curr_rate = rates.get(alert["currency"])
                if curr_rate is None:
                    new_alerts.append(alert)
                    continue
                if alert["direction"] == "up" and curr_rate >= alert["target"]:
                    try:
                        await bot.send_message(user_id, f"üöÄ {alert['currency']} –¥–æ—Å—Ç–∏–≥ {alert['target']} RUB!", reply_markup=main_keyboard())
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ alert –¥–ª—è {user_id}: {e}")
                    continue
                elif alert["direction"] == "down" and curr_rate <= alert["target"]:
                    try:
                        await bot.send_message(user_id, f"üöÄ {alert['currency']} –¥–æ—Å—Ç–∏–≥ {alert['target']} RUB!", reply_markup=main_keyboard())
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ alert –¥–ª—è {user_id}: {e}")
                    continue
                new_alerts.append(alert)
            if new_alerts:
                alerts[user_id] = new_alerts
            else:
                alerts.pop(user_id)

# ===== –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ª—É—á—à–∏—Ö –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤ =====
best_rates_cache = {
    "timestamp": 0,
    "data": None
}
CACHE_DURATION = 300  # 5 –º–∏–Ω—É—Ç

def get_best_exchange_rates(force_update: bool = False):
    """
    –ï—Å–ª–∏ force_update==False, —Ç–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö.
    –ò–Ω–∞—á–µ –≤—ã–ø–æ–ª–Ω—è–µ–º HTTP-–∑–∞–ø—Ä–æ—Å –∫ –Ω–æ–≤–æ–º—É API –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à.
    """
    global best_rates_cache
    current_time = time.time()
    if (not force_update and best_rates_cache["data"] is not None and
            (current_time - best_rates_cache["timestamp"] < CACHE_DURATION)):
        logging.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤.")
        return best_rates_cache["data"]

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –í–∞–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä, –≤–∫–ª—é—á–∞—è cookies.
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36",
        "accept": "application/json, text/plain, */*",
        "accept-language": "ru,en;q=0.9",
        "cookie": "_flpt_percent_zone=10; _flpt_sso_auth_user_in_segment=off; _gcl_au=1.1.1558551762.1737809557; _ga=GA1.2.840259073.1737809558; non_auth_user_region_id=508; uxs_uid=fceb3e50-db1b-11ef-8910-6fed71a169ad; __lhash_=03e5c24c899eb1ff0e109d0c2e4c764d; gtm-session-start=1739019645006; _gid=GA1.2.1108255462.1739019648; __hash_=e53d727ad88b20e2078fb1da6b19e342; _gat=1; banki_prev_page=/products/currencyNodejsApi/getBanksOrExchanges/; BANKI_RU_MYBANKI_ID=4895db1c-7df1-46d1-8fd2-6f4ddb5a3db2; _banki_ru_mybanki_id_migration=2024-08-14-updatedCookieDomain; counter_session=3; aff_sub3=/products/currency/cash/izhevsk/",
        "referer": "https://www.banki.ru/products/currency/cash/izhevsk/",
        "x-requested-with": "XMLHttpRequest"
    }
    try:
        response = requests.get(BANKI_API_URL, headers=headers, timeout=10)
        response.raise_for_status()
        data = response.json()
        banks_list = data.get("list", [])
        banks = []
        for bank in banks_list:
            name = bank.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–Ω–∫")
            exchange = bank.get("exchange", {})
            buy = exchange.get("buy", 0)
            sale = exchange.get("sale", 0)
            refresh_date = exchange.get("refreshDate", "")
            banks.append((name, buy, sale, refresh_date))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å banki.ru: {e}")
        banks = []

    best_rates_cache["timestamp"] = current_time
    best_rates_cache["data"] = banks
    logging.info("–î–∞–Ω–Ω—ã–µ –ª—É—á—à–∏—Ö –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à.")
    return banks

def generate_best_rates_text(banks):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ª—É—á—à–∏—Ö –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤.
    """
    lines = ["üìä *–õ—É—á—à–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∏ –≤ –ò–∂–µ–≤—Å–∫–µ (USD):*\n"]
    for i, (name, buy, sale, refresh_date) in enumerate(banks[:10], start=1):
        lines.append(f"*{i}. {name}*")
        lines.append(f"  üîπ –ü–æ–∫—É–ø–∫–∞: *{buy}‚ÇΩ*")
        lines.append(f"  üî∏ –ü—Ä–æ–¥–∞–∂–∞: *{sale}‚ÇΩ*")
        lines.append(f"  ‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: `{refresh_date}`\n")
    return "\n".join(lines)

async def best_rates_cache_refresher():
    """
    –§–æ–Ω–æ–≤—ã–π —Ç–∞—Å–∫, –∫–æ—Ç–æ—Ä—ã–π –∫–∞–∂–¥—ã–µ CACHE_DURATION —Å–µ–∫—É–Ω–¥ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –¥–∞–Ω–Ω—ã—Ö –ª—É—á—à–∏—Ö –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤.
    """
    while True:
        loop = asyncio.get_event_loop()
        try:
            await loop.run_in_executor(None, lambda: get_best_exchange_rates(force_update=True))
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –ª—É—á—à–∏—Ö –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤: {e}")
        await asyncio.sleep(CACHE_DURATION)

# ===== –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–õ—É—á—à–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∏" =====
best_rates_lock = {}
best_rates_last_time = {}
BEST_RATES_COOLDOWN = 30

@dp.message_handler(commands=['best_rates'])
@dp.message_handler(lambda message: message.text == "üìä –õ—É—á—à–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∏ –≤ –ò–∂–µ–≤—Å–∫–µ")
async def best_rates_handler(message: Message):
    user_id = message.from_user.id
    current_time = asyncio.get_event_loop().time()

    if user_id in best_rates_last_time and (current_time - best_rates_last_time[user_id] < BEST_RATES_COOLDOWN):
        await message.reply("–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∑–∞–ø—Ä–æ—Å—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        return
    best_rates_last_time[user_id] = current_time

    if user_id not in best_rates_lock:
        best_rates_lock[user_id] = asyncio.Lock()
    lock = best_rates_lock[user_id]

    if lock.locked():
        await message.reply("–í–∞—à –∑–∞–ø—Ä–æ—Å —É–∂–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        return

    async with lock:
        if best_rates_cache["data"] is None:
            loop = asyncio.get_event_loop()
            await loop.run_in_executor(None, lambda: get_best_exchange_rates(force_update=True))
        
        banks = best_rates_cache["data"]
        if not banks:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç.", reply_markup=main_keyboard())
            return

        # –ó–¥–µ—Å—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Ç–µ–∫—Å—Ç —Å Markdown-—Ä–∞–∑–º–µ—Ç–∫–æ–π:
        text = generate_best_rates_text(banks)
        await message.reply(text, parse_mode="Markdown", reply_markup=main_keyboard())

# ===== on_startup: –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ –∏ –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á =====
async def on_startup(_):
    loop = asyncio.get_event_loop()
    # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à –ª—É—á—à–∏—Ö –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤
    await loop.run_in_executor(None, lambda: get_best_exchange_rates(force_update=True))
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ —Ç–∞—Å–∫–∏
    asyncio.create_task(best_rates_cache_refresher())
    asyncio.create_task(daily_exchange_rates())
    asyncio.create_task(check_alerts())

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
