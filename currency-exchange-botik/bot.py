import asyncio
import datetime
import logging
import time
from io import BytesIO

import matplotlib.pyplot as plt
import numpy as np
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup
from aiogram.utils import executor
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.dispatcher.handler import CancelHandler
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# ===== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è =====
API_TOKEN = "tgtoken"
CBR_API_URL = "https://www.cbr-xml-daily.ru/daily_json.js"
BANKI_URL = "https://www.banki.ru/products/currency/cash/izhevsk/"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# ===== Throttling Middleware (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π) =====
class ThrottlingMiddleware(BaseMiddleware):
    def __init__(self, limit=1):
        self.rate_limit = limit
        super().__init__()

    async def on_process_message(self, message: types.Message, data: dict):
        user_id = message.from_user.id
        current = asyncio.get_event_loop().time()
        last_time = dp.storage.data.get(user_id, 0)
        if current - last_time < self.rate_limit:
            try:
                await message.reply("–í—ã —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            raise CancelHandler()
        dp.storage.data[user_id] = current


dp.storage.data = {}
dp.middleware.setup(ThrottlingMiddleware(limit=1))

# ===== –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö =====
user_data = {}       # –î–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
subscribers = set()  # ID –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
alerts = {}          # –ë—É–¥–∏–ª—å–Ω–∏–∫–∏

logging.basicConfig(level=logging.INFO)

# ===== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é =====
def main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        "USD", "EUR", "JPY", "TRY", "RUB",
        "üìä –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è",
        "üîî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫", "üìâ –ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞",
        "üìä –õ—É—á—à–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∏ –≤ –ò–∂–µ–≤—Å–∫–µ",
        "üìã –ú–æ–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∏"
    ]
    keyboard.add(*buttons)
    return keyboard

# ===== –ö–æ–º–∞–Ω–¥–∞ /start =====
@dp.message_handler(commands=["start"])
async def start_command(message: Message):
    user_data.pop(message.from_user.id, None)
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())

# ===== –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç =====
@dp.message_handler(lambda message: message.text in ["USD", "EUR", "JPY", "TRY", "RUB"])
async def currency_selected(message: Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {}
    if "amount" in user_data[user_id]:
        if user_data[user_id].get("from_currency") == message.text:
            await message.reply("‚ùå –í–∞–ª—é—Ç–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–π. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É:")
            return
        user_data[user_id]["to_currency"] = message.text
        await convert_currency(message)
    else:
        user_data[user_id]["from_currency"] = message.text
        await message.reply(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {message.text}. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")

def is_number(text: str) -> bool:
    try:
        float(text.replace(',', '.'))
        return True
    except ValueError:
        return False

@dp.message_handler(lambda message: (
    message.from_user.id in user_data and 
    "from_currency" in user_data[message.from_user.id] and 
    "amount" not in user_data[message.from_user.id] and 
    is_number(message.text)
))
async def amount_selected(message: Message):
    try:
        amount = float(message.text.replace(',', '.'))
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã!", reply_markup=main_keyboard())
        return
    if amount <= 0:
        user_data.pop(message.from_user.id, None)
        await message.reply("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!", reply_markup=main_keyboard())
        return
    if amount < 0.01:
        user_data.pop(message.from_user.id, None)
        await message.reply("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 0.01!", reply_markup=main_keyboard())
        return
    if amount > 1_000_000_000:
        user_data.pop(message.from_user.id, None)
        await message.reply("‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –º–µ–Ω—å—à–µ 1,000,000,000.", reply_markup=main_keyboard())
        return
    user_data[message.from_user.id]["amount"] = amount
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["USD", "EUR", "JPY", "TRY", "RUB"]
    keyboard.add(*buttons)
    await message.reply("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:", reply_markup=keyboard)

async def convert_currency(message: Message):
    from_currency = user_data[message.from_user.id]["from_currency"]
    to_currency = user_data[message.from_user.id]["to_currency"]
    amount = user_data[message.from_user.id]["amount"]

    rates = get_exchange_rates()
    if not rates:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=main_keyboard())
        return

    result = (amount * rates[from_currency]) / rates[to_currency]
    if 0 < result < 0.01:
        result_str = f"{result:.6f}"
    else:
        result_str = f"{result:.2f}"
    await message.reply(f"üí± {amount} {from_currency} = {result_str} {to_currency}", reply_markup=main_keyboard())
    user_data.pop(message.from_user.id, None)

def get_exchange_rates():
    try:
        import requests
        response = requests.get(CBR_API_URL)
        response.raise_for_status()
        data = response.json()
        rates = {
            "USD": data["Valute"]["USD"]["Value"],
            "EUR": data["Valute"]["EUR"]["Value"],
            "JPY": data["Valute"]["JPY"]["Value"] / 100,
            "TRY": data["Valute"]["TRY"]["Value"],
            "RUB": 1.0
        }
        return rates
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤: {e}")
        return None

# ===== –ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞ (USD –∫ RUB) —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–ø–∞–º–∞ =====
# –î–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞" –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏:
graph_currency_lock = {}         # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ–±—ä–µ–∫—Ç asyncio.Lock
graph_currency_last_time = {}      # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ user_id
GRAPH_CURRENCY_COOLDOWN = 30       # –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

def generate_currency_graph():
    """
    –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ API –¶–ë –∏ —Å—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞ USD –∫ RUB –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤.
    """
    currency = "USD"
    today = datetime.date.today()
    dates = []
    values = []
    for i in range(7):
        date = today - datetime.timedelta(days=i)
        date_str = date.strftime("%Y/%m/%d")
        url = f"https://www.cbr-xml-daily.ru/archive/{date_str}/daily_json.js"
        try:
            import requests
            response = requests.get(url)
            if response.status_code == 200:
                data = response.json()
                if currency in data["Valute"]:
                    dates.append(date.strftime("%d.%m"))
                    values.append(data["Valute"][currency]["Value"])
        except Exception:
            continue

    if len(dates) < 2:
        raise Exception("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞.")
        
    plt.figure(figsize=(8, 4))
    plt.plot(dates[::-1], values[::-1], marker="o", linestyle="-", label=f"{currency} –∫ RUB")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–ö—É—Ä—Å")
    plt.title(f"üìâ –ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞ {currency} –∫ RUB")
    plt.legend()
    plt.grid(True)
    buf = BytesIO()
    plt.savefig(buf, format="png")
    buf.seek(0)
    plt.close()
    return buf.getvalue()

@dp.message_handler(lambda message: message.text == "üìâ –ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞")
async def send_currency_graph(message: Message):
    user_id = message.from_user.id
    current_time = asyncio.get_event_loop().time()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –Ω–µ–¥–∞–≤–Ω–æ, –æ—Ç–∫–∞–∑—ã–≤–∞–µ–º
    if user_id in graph_currency_last_time and (current_time - graph_currency_last_time[user_id] < GRAPH_CURRENCY_COOLDOWN):
        await message.reply("–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∑–∞–ø—Ä–æ—Å—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        return
    graph_currency_last_time[user_id] = current_time

    # –ï—Å–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â—ë –Ω–µ—Ç lock ‚Äì —Å–æ–∑–¥–∞—ë–º –µ–≥–æ
    if user_id not in graph_currency_lock:
        graph_currency_lock[user_id] = asyncio.Lock()
    lock = graph_currency_lock[user_id]

    # –ï—Å–ª–∏ —É–∂–µ –∏–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞, —Å—Ä–∞–∑—É —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
    if lock.locked():
        await message.reply("–í–∞—à –∑–∞–ø—Ä–æ—Å —É–∂–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        return

    async with lock:
        try:
            loop = asyncio.get_event_loop()
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—è–∂—ë–ª—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –ø—É–ª–µ –ø–æ—Ç–æ–∫–æ–≤
            image_bytes = await loop.run_in_executor(None, generate_currency_graph)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞.", reply_markup=main_keyboard())
            return
        await message.reply_photo(image_bytes, reply_markup=main_keyboard())

# ===== –ü–æ–¥–ø–∏—Å–∫–∞ =====
@dp.message_handler(lambda message: message.text == "üìä –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")
async def subscribe_command(message: Message):
    subscribers.add(message.from_user.id)
    await message.reply("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç!", reply_markup=main_keyboard())

@dp.message_handler(lambda message: message.text == "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è")
async def unsubscribe_command(message: Message):
    subscribers.discard(message.from_user.id)
    await message.reply("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.", reply_markup=main_keyboard())

# ===== –ë—É–¥–∏–ª—å–Ω–∏–∫–∏ =====
@dp.message_handler(lambda message: message.text == "üîî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫")
async def alert_start(message: Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `/alert USD 100.50`", reply_markup=main_keyboard())

@dp.message_handler(lambda message: message.text.lower().startswith("/alert"))
async def set_alert(message: Message):
    parts = message.text.split()
    if len(parts) < 3:
        await message.reply("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/alert USD 100.50`", reply_markup=main_keyboard())
        return
    currency = parts[1].upper()
    allowed_currencies = ["USD", "EUR", "JPY", "TRY", "RUB"]
    if currency not in allowed_currencies:
        await message.reply(f"‚ùå –í–∞–ª—é—Ç–∞ {currency} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –î–æ—Å—Ç—É–ø–Ω—ã: {', '.join(allowed_currencies)}", reply_markup=main_keyboard())
        return
    try:
        target_price = float(parts[2])
        rates = get_exchange_rates()
        if not rates or currency not in rates:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_keyboard())
            return
        current_rate = rates[currency]
        direction = "up" if target_price > current_rate else "down"
        user_id = message.from_user.id
        if user_id not in alerts:
            alerts[user_id] = []
        alerts[user_id].append({
            "currency": currency,
            "target": target_price,
            "direction": direction
        })
        await message.reply(f"üîî –ë—É–¥–∏–ª—å–Ω–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {currency} ‚Üí {target_price} RUB (–æ–∂–∏–¥–∞–µ–º {'—Ä–æ—Å—Ç–∞' if direction=='up' else '–ø–∞–¥–µ–Ω–∏—è'})", reply_markup=main_keyboard())
    except ValueError:
        await message.reply("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/alert USD 100.50`", reply_markup=main_keyboard())

@dp.message_handler(commands=["myalerts"])
@dp.message_handler(lambda message: message.text == "üìã –ú–æ–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∏")
async def view_alerts(message: Message):
    user_id = message.from_user.id
    if user_id not in alerts or not alerts[user_id]:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤.", reply_markup=main_keyboard())
        return
    text_lines = ["–í–∞—à–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∏:"]
    for idx, alert in enumerate(alerts[user_id], start=1):
        text_lines.append(f"{idx}. {alert['currency']} ‚Üí {alert['target']} RUB")
    text_lines.append("\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n`/delete_alert <–Ω–æ–º–µ—Ä>`")
    await message.reply("\n".join(text_lines), parse_mode="Markdown", reply_markup=main_keyboard())

@dp.message_handler(commands=["delete_alert"])
async def delete_alert(message: Message):
    parts = message.text.split()
    if len(parts) < 2:
        await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –±—É–¥–∏–ª—å–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/delete_alert 1`", reply_markup=main_keyboard())
        return
    try:
        index = int(parts[1]) - 1
        user_id = message.from_user.id
        if user_id not in alerts or index < 0 or index >= len(alerts[user_id]):
            await message.reply("‚ùå –ë—É–¥–∏–ª—å–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_keyboard())
            return
        removed = alerts[user_id].pop(index)
        await message.reply(f"‚úÖ –ë—É–¥–∏–ª—å–Ω–∏–∫ {removed['currency']} ‚Üí {removed['target']} RUB —É–¥–∞–ª—ë–Ω.", reply_markup=main_keyboard())
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/delete_alert 1`", reply_markup=main_keyboard())

# ===== –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ =====
async def daily_exchange_rates():
    while True:
        await asyncio.sleep(86400)
        rates = get_exchange_rates()
        if subscribers and rates:
            text = "üìä **–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:**\n" + "\n".join(f"üí∞ {c}: {v:.2f} RUB" for c, v in rates.items())
            for user_id in subscribers:
                try:
                    await bot.send_message(user_id, text, parse_mode="Markdown", reply_markup=main_keyboard())
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–ø–∏—Å—á–∏–∫—É {user_id}: {e}")

async def check_alerts():
    while True:
        await asyncio.sleep(300)
        rates = get_exchange_rates()
        if not rates:
            continue
        for user_id, user_alerts in list(alerts.items()):
            new_alerts = []
            for alert in user_alerts:
                curr_rate = rates.get(alert["currency"])
                if curr_rate is None:
                    new_alerts.append(alert)
                    continue
                if alert["direction"] == "up" and curr_rate >= alert["target"]:
                    try:
                        await bot.send_message(user_id, f"üöÄ {alert['currency']} –¥–æ—Å—Ç–∏–≥ {alert['target']} RUB!", reply_markup=main_keyboard())
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ alert –¥–ª—è {user_id}: {e}")
                    continue
                elif alert["direction"] == "down" and curr_rate <= alert["target"]:
                    try:
                        await bot.send_message(user_id, f"üöÄ {alert['currency']} –¥–æ—Å—Ç–∏–≥ {alert['target']} RUB!", reply_markup=main_keyboard())
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ alert –¥–ª—è {user_id}: {e}")
                    continue
                new_alerts.append(alert)
            if new_alerts:
                alerts[user_id] = new_alerts
            else:
                alerts.pop(user_id)

# ===== –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ª—É—á—à–∏—Ö –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤ =====
best_rates_cache = {
    "timestamp": 0,
    "data": None
}
CACHE_DURATION = 300  # 5 –º–∏–Ω—É—Ç

def get_best_exchange_rates_selenium(force_update: bool = False):
    """
    –ï—Å–ª–∏ force_update==False, —Ç–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö.
    –ò–Ω–∞—á–µ –∑–∞–ø—É—Å–∫–∞–µ–º Selenium –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à.
    """
    global best_rates_cache
    current_time = time.time()
    if (not force_update and best_rates_cache["data"] is not None and
            (current_time - best_rates_cache["timestamp"] < CACHE_DURATION)):
        logging.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤.")
        return best_rates_cache["data"]

    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    driver = webdriver.Chrome(options=chrome_options)
    
    driver.get(BANKI_URL)
    try:
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "div[data-test='currency__rates-form__result-item']"))
        )
    except Exception as e:
        logging.error(f"Timeout –∏–ª–∏ –æ—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è: {e}")
        driver.quit()
        return []
    
    html = driver.page_source
    driver.quit()

    soup = BeautifulSoup(html, 'html.parser')
    banks = []
    items = soup.find_all('div', {'data-test': 'currency__rates-form__result-item'})
    logging.info(f"–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∫—É—Ä—Å–∞–º–∏: {len(items)}")
    for item in items:
        name_elem = item.find('div', {'data-test': 'currenct--result-item--name'})
        if not name_elem:
            continue
        name = name_elem.text.strip()

        buy_elem = item.find('div', {'data-test': 'currency--result-item---rate-buy'})
        sell_elem = item.find('div', {'data-test': 'currency--result-item---rate-sell'})
        if not (buy_elem and sell_elem):
            continue

        buy_divs = buy_elem.find_all('div')
        sell_divs = sell_elem.find_all('div')
        if not (buy_divs and sell_divs):
            continue

        try:
            buy_str = buy_divs[-1].text.strip().replace('‚ÇΩ', '').replace(',', '.')
            sell_str = sell_divs[-1].text.strip().replace('‚ÇΩ', '').replace(',', '.')
            buy = float(buy_str)
            sell = float(sell_str)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫—É—Ä—Å–æ–≤ –¥–ª—è –±–∞–Ω–∫–∞ {name}: {e}")
            continue

        refresh_elem = item.find('div', {'data-test': 'currency--result-item--refresh-date'})
        refresh_text = refresh_elem.text.strip() if refresh_elem else ""

        banks.append((name, buy, sell, refresh_text))
    
    best_rates_cache["timestamp"] = current_time
    best_rates_cache["data"] = sorted(banks, key=lambda x: x[1], reverse=True)
    logging.info("–î–∞–Ω–Ω—ã–µ –ª—É—á—à–∏—Ö –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à.")
    return best_rates_cache["data"]

async def best_rates_cache_refresher():
    """
    –§–æ–Ω–æ–≤—ã–π —Ç–∞—Å–∫, –∫–æ—Ç–æ—Ä—ã–π –∫–∞–∂–¥—ã–µ CACHE_DURATION —Å–µ–∫—É–Ω–¥ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –¥–∞–Ω–Ω—ã—Ö –ª—É—á—à–∏—Ö –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤.
    """
    while True:
        loop = asyncio.get_event_loop()
        try:
            await loop.run_in_executor(None, lambda: get_best_exchange_rates_selenium(force_update=True))
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –ª—É—á—à–∏—Ö –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤: {e}")
        await asyncio.sleep(CACHE_DURATION)

# ===== –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–õ—É—á—à–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∏" =====
# (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ "–ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞" ‚Äì –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∑–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª)
graph_generation_lock = {}         # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ–±—ä–µ–∫—Ç asyncio.Lock
graph_generation_last_time = {}      # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ user_id
GRAPH_GENERATION_COOLDOWN = 30       # –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

def generate_chart(banks):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –ª—É—á—à–∏—Ö –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Matplotlib –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤.
    """
    names = [bank[0] for bank in banks]
    buy_rates = [bank[1] for bank in banks]
    sell_rates = [bank[2] for bank in banks]
    refresh_texts = [bank[3] for bank in banks]

    y = np.arange(len(names))
    width = 0.4  # –®–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤

    plt.figure(figsize=(12, 6))
    plt.barh(y - width/2, buy_rates, width, color='green', label='–ü–æ–∫—É–ø–∫–∞')
    plt.barh(y + width/2, sell_rates, width, color='red', label='–ü—Ä–æ–¥–∞–∂–∞')

    plt.yticks(y, names)
    plt.xlabel('–ö—É—Ä—Å (‚ÇΩ)')
    plt.ylabel('–ë–∞–Ω–∫–∏')
    plt.title('–õ—É—á—à–∏–µ –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞ –≤ –ò–∂–µ–≤—Å–∫–µ')
    plt.legend()
    plt.grid(axis='x')

    for i, (buy, sell, refresh) in enumerate(zip(buy_rates, sell_rates, refresh_texts)):
        plt.text(buy + 0.5, i - width/2, f'{buy:.2f}‚ÇΩ', va='center', fontsize=10, color='black')
        plt.text(sell + 0.5, i + width/2, f'{sell:.2f}‚ÇΩ', va='center', fontsize=10, color='black')
        if refresh:
            if buy >= sell:
                x_center = buy / 2
                y_center = i - width/2
            else:
                x_center = sell / 2
                y_center = i + width/2
            plt.text(x_center, y_center, refresh, va='center', ha='center', fontsize=8, 
                     color='white', weight='bold')

    buf = BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close()
    return buf.getvalue()

@dp.message_handler(commands=['best_rates'])
@dp.message_handler(lambda message: message.text == "üìä –õ—É—á—à–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∏ –≤ –ò–∂–µ–≤—Å–∫–µ")
async def best_rates_handler(message: Message):
    user_id = message.from_user.id
    current_time = asyncio.get_event_loop().time()

    if user_id in graph_generation_last_time and (current_time - graph_generation_last_time[user_id] < GRAPH_GENERATION_COOLDOWN):
        await message.reply("–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∑–∞–ø—Ä–æ—Å—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        return
    graph_generation_last_time[user_id] = current_time

    if user_id not in graph_generation_lock:
        graph_generation_lock[user_id] = asyncio.Lock()
    lock = graph_generation_lock[user_id]

    if lock.locked():
        await message.reply("–í–∞—à –∑–∞–ø—Ä–æ—Å —É–∂–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        return

    async with lock:
        if best_rates_cache["data"] is None:
            loop = asyncio.get_event_loop()
            await loop.run_in_executor(None, lambda: get_best_exchange_rates_selenium(force_update=True))
        
        banks = best_rates_cache["data"]
        if not banks:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç.", reply_markup=main_keyboard())
            return

        banks = banks[:10]  # –ë–µ—Ä–µ–º —Ç–æ–ø-10
        loop = asyncio.get_event_loop()
        image_bytes = await loop.run_in_executor(None, generate_chart, banks)
        await message.reply_photo(image_bytes, reply_markup=main_keyboard())

# ===== on_startup: –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ –∏ –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á =====
async def on_startup(_):
    loop = asyncio.get_event_loop()
    # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à –ª—É—á—à–∏—Ö –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤
    await loop.run_in_executor(None, lambda: get_best_exchange_rates_selenium(force_update=True))
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ —Ç–∞—Å–∫–∏
    asyncio.create_task(best_rates_cache_refresher())
    asyncio.create_task(daily_exchange_rates())
    asyncio.create_task(check_alerts())

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
