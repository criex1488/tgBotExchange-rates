import asyncio
import datetime
import requests
import logging
import matplotlib.pyplot as plt
import numpy as np
from io import BytesIO
from bs4 import BeautifulSoup  # –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup
from aiogram.utils import executor
from aiogram.dispatcher.middlewares import BaseMiddleware  # –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ throttling
from aiogram.dispatcher.handler import CancelHandler
from aiogram.dispatcher import DEFAULT_RATE_LIMIT, Dispatcher

# ===== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è =====
API_TOKEN = "tgtoken"  # –í–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–∫–µ–Ω
CBR_API_URL = "https://www.cbr-xml-daily.ru/daily_json.js"
BANKI_URL = "https://www.banki.ru/products/currency/cash/izhevsk/"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# ===== Throttling Middleware =====
class ThrottlingMiddleware(BaseMiddleware):
    def __init__(self, limit=1):
        self.rate_limit = limit
        super().__init__()

    async def on_process_message(self, message: types.Message, data: dict):
        # –î–ª—è –∫–∞–∂–¥–æ–π –≤—Ö–æ–¥—è—â–µ–π –∫–æ–º–∞–Ω–¥—ã –±—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É
        user_id = message.from_user.id
        current = asyncio.get_event_loop().time()
        last_time = dp.storage.data.get(user_id, 0)
        if current - last_time < self.rate_limit:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ, –æ—Ç–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            raise CancelHandler()
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        dp.storage.data[user_id] = current

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è throttling (–ø—Ä–æ—Å—Ç–æ–π dict)
dp.storage.data = {}

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware (–ª–∏–º–∏—Ç –≤ 1 —Å–µ–∫—É–Ω–¥—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)
dp.middleware.setup(ThrottlingMiddleware(limit=1))

# ===== –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö =====
user_data = {}     # –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
subscribers = set()  # ID –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# –ò–∑–º–µ–Ω—è–µ–º alerts: —Ç–µ–ø–µ—Ä—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–∏—Å–æ–∫ –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤
alerts = {}  # { user_id: [ {"currency": ..., "target": ...}, ... ] }

logging.basicConfig(level=logging.INFO)

# ===== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é =====
def main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        "USD", "EUR", "JPY", "TRY", "RUB",
        "üìä –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è",
        "üîî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫", "üìâ –ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞",
        "üìä –õ—É—á—à–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∏ –≤ –ò–∂–µ–≤—Å–∫–µ",
        "üìã –ú–æ–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∏"  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤
    ]
    keyboard.add(*buttons)
    return keyboard

# ===== –ö–æ–º–∞–Ω–¥–∞ /start =====
@dp.message_handler(commands=["start"])
async def start_command(message: Message):
    user_data.pop(message.from_user.id, None)  # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())

# ===== –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç =====
@dp.message_handler(lambda message: message.text in ["USD", "EUR", "JPY", "TRY", "RUB"])
async def currency_selected(message: Message):
    if message.from_user.id not in user_data:
        user_data[message.from_user.id] = {}

    if "amount" in user_data[message.from_user.id]:
        user_data[message.from_user.id]["to_currency"] = message.text
        await convert_currency(message)
    else:
        user_data[message.from_user.id]["from_currency"] = message.text
        await message.reply(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {message.text}. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")

@dp.message_handler(lambda message: message.text.replace(".", "", 1).isdigit() and message.from_user.id in user_data)
async def amount_selected(message: Message):
    user_data[message.from_user.id]["amount"] = float(message.text)
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["USD", "EUR", "JPY", "TRY", "RUB"]
    keyboard.add(*buttons)
    await message.reply("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:", reply_markup=keyboard)

async def convert_currency(message: Message):
    from_currency = user_data[message.from_user.id]["from_currency"]
    to_currency = user_data[message.from_user.id]["to_currency"]
    amount = user_data[message.from_user.id]["amount"]

    rates = get_exchange_rates()
    if not rates:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=main_keyboard())
        return

    result = (amount * rates[from_currency]) / rates[to_currency]
    await message.reply(f"üí± {amount} {from_currency} = {result:.2f} {to_currency}", reply_markup=main_keyboard())
    user_data.pop(message.from_user.id, None)  # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏

def get_exchange_rates():
    try:
        response = requests.get(CBR_API_URL)
        response.raise_for_status()
        data = response.json()
        rates = {
            "USD": data["Valute"]["USD"]["Value"],
            "EUR": data["Valute"]["EUR"]["Value"],
            "JPY": data["Valute"]["JPY"]["Value"] / 100,  # –ö—É—Ä—Å –∑–∞ 100 JPY
            "TRY": data["Valute"]["TRY"]["Value"],
            "RUB": 1.0
        }
        return rates
    except requests.RequestException:
        return None

# ===== –ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞ –∑–∞ 7 –¥–Ω–µ–π =====
@dp.message_handler(lambda message: message.text == "üìâ –ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞")
async def send_currency_graph(message: Message):
    currency = user_data.get(message.from_user.id, {}).get("from_currency", "USD")
    today = datetime.date.today()
    dates = []
    values = []
    for i in range(7):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        date = today - datetime.timedelta(days=i)
        date_str = date.strftime("%Y/%m/%d")
        url = f"https://www.cbr-xml-daily.ru/archive/{date_str}/daily_json.js"
        try:
            response = requests.get(url)
            if response.status_code == 200:
                data = response.json()
                if currency in data["Valute"]:
                    dates.append(date.strftime("%d.%m"))
                    values.append(data["Valute"][currency]["Value"])
        except Exception:
            continue

    if len(dates) < 2:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞.", reply_markup=main_keyboard())
        return

    plt.figure(figsize=(8, 4))
    plt.plot(dates[::-1], values[::-1], marker="o", linestyle="-", label=f"{currency} –∫ RUB")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–ö—É—Ä—Å")
    plt.title(f"üìâ –ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞ {currency} –∫ RUB")
    plt.legend()
    plt.grid(True)
    buf = BytesIO()
    plt.savefig(buf, format="png")
    buf.seek(0)
    plt.close()
    await message.reply_photo(buf, reply_markup=main_keyboard())

# ===== –ü–æ–¥–ø–∏—Å–∫–∞ –∏ –æ—Ç–ø–∏—Å–∫–∞ =====
@dp.message_handler(lambda message: message.text == "üìä –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")
async def subscribe_command(message: Message):
    subscribers.add(message.from_user.id)
    await message.reply("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç!", reply_markup=main_keyboard())

@dp.message_handler(lambda message: message.text == "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è")
async def unsubscribe_command(message: Message):
    subscribers.discard(message.from_user.id)
    await message.reply("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.", reply_markup=main_keyboard())

# ===== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—É–¥–∏–ª—å–Ω–∏–∫–∞ =====
@dp.message_handler(lambda message: message.text == "üîî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫")
async def alert_start(message: Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `/alert USD 100.50`", reply_markup=main_keyboard())

# ===== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—É–¥–∏–ª—å–Ω–∏–∫–∞ =====
@dp.message_handler(lambda message: message.text.lower().startswith("/alert"))
async def set_alert(message: Message):
    parts = message.text.split()
    if len(parts) < 3:
        await message.reply("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/alert USD 100.50`", reply_markup=main_keyboard())
        return

    currency = parts[1].upper()
    allowed_currencies = ["USD", "EUR", "JPY", "TRY", "RUB"]
    if currency not in allowed_currencies:
        await message.reply(f"‚ùå –í–∞–ª—é—Ç–∞ {currency} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –î–æ—Å—Ç—É–ø–Ω—ã: {', '.join(allowed_currencies)}", reply_markup=main_keyboard())
        return

    try:
        target_price = float(parts[2])
        rates = get_exchange_rates()
        if not rates or currency not in rates:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_keyboard())
            return

        current_rate = rates[currency]
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –µ—Å–ª–∏ —Ü–µ–ª—å –≤—ã—à–µ —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞ ‚Äî –∂–¥—ë–º —Ä–æ—Å—Ç–∞, –∏–Ω–∞—á–µ ‚Äî –ø–∞–¥–µ–Ω–∏—è.
        if target_price > current_rate:
            direction = "up"
        else:
            direction = "down"

        user_id = message.from_user.id
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ —Ä–∞–Ω–µ–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –±—ã–ª–æ –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤
        if user_id not in alerts:
            alerts[user_id] = []
        alerts[user_id].append({
            "currency": currency,
            "target": target_price,
            "direction": direction
        })
        await message.reply(f"üîî –ë—É–¥–∏–ª—å–Ω–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {currency} ‚Üí {target_price} RUB (–æ–∂–∏–¥–∞–µ–º {'—Ä–æ—Å—Ç–∞' if direction=='up' else '–ø–∞–¥–µ–Ω–∏—è'})", reply_markup=main_keyboard())
    except ValueError:
        await message.reply("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/alert USD 100.50`", reply_markup=main_keyboard())

# ===== –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤ =====
@dp.message_handler(commands=["myalerts"])
@dp.message_handler(lambda message: message.text == "üìã –ú–æ–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∏")
async def view_alerts(message: Message):
    user_id = message.from_user.id
    if user_id not in alerts or not alerts[user_id]:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤.", reply_markup=main_keyboard())
        return

    text_lines = ["–í–∞—à–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∏:"]
    for idx, alert in enumerate(alerts[user_id], start=1):
        text_lines.append(f"{idx}. {alert['currency']} ‚Üí {alert['target']} RUB")
    text_lines.append("\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n`/delete_alert <–Ω–æ–º–µ—Ä>`")
    await message.reply("\n".join(text_lines), parse_mode="Markdown", reply_markup=main_keyboard())

# ===== –£–¥–∞–ª–µ–Ω–∏–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∞ =====
@dp.message_handler(commands=["delete_alert"])
async def delete_alert(message: Message):
    parts = message.text.split()
    if len(parts) < 2:
        await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –±—É–¥–∏–ª—å–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/delete_alert 1`", reply_markup=main_keyboard())
        return

    try:
        index = int(parts[1]) - 1
        user_id = message.from_user.id
        if user_id not in alerts or index < 0 or index >= len(alerts[user_id]):
            await message.reply("‚ùå –ë—É–¥–∏–ª—å–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_keyboard())
            return

        removed = alerts[user_id].pop(index)
        await message.reply(f"‚úÖ –ë—É–¥–∏–ª—å–Ω–∏–∫ {removed['currency']} ‚Üí {removed['target']} RUB —É–¥–∞–ª—ë–Ω.", reply_markup=main_keyboard())
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/delete_alert 1`", reply_markup=main_keyboard())

# ===== –§–æ–Ω–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤ =====
async def daily_exchange_rates():
    while True:
        await asyncio.sleep(86400)  # 24 —á–∞—Å–∞
        rates = get_exchange_rates()
        if subscribers and rates:
            text = "üìä **–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:**\n" + "\n".join(f"üí∞ {c}: {v:.2f} RUB" for c, v in rates.items())
            for user_id in subscribers:
                try:
                    await bot.send_message(user_id, text, parse_mode="Markdown", reply_markup=main_keyboard())
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–ø–∏—Å—á–∏–∫—É {user_id}: {e}")

async def check_alerts():
    while True:
        await asyncio.sleep(300)  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        rates = get_exchange_rates()
        if not rates:
            continue
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é alerts –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        for user_id, user_alerts in list(alerts.items()):
            new_alerts = []
            for alert in user_alerts:
                curr_rate = rates.get(alert["currency"])
                if curr_rate is None:
                    new_alerts.append(alert)
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                if alert["direction"] == "up":
                    # –û–∂–∏–¥–∞–µ–º —Ä–æ—Å—Ç–∞: —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º, –µ—Å–ª–∏ –∫—É—Ä—Å —Å—Ç–∞–ª >= —Ü–µ–ª–∏
                    if curr_rate >= alert["target"]:
                        try:
                            await bot.send_message(user_id, f"üöÄ {alert['currency']} –¥–æ—Å—Ç–∏–≥ {alert['target']} RUB!", reply_markup=main_keyboard())
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ alert –¥–ª—è {user_id}: {e}")
                        continue  # –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏–π alert –≤ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
                else:
                    # –û–∂–∏–¥–∞–µ–º –ø–∞–¥–µ–Ω–∏—è: —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º, –µ—Å–ª–∏ –∫—É—Ä—Å —Å—Ç–∞–ª <= —Ü–µ–ª–∏
                    if curr_rate <= alert["target"]:
                        try:
                            await bot.send_message(user_id, f"üöÄ {alert['currency']} –¥–æ—Å—Ç–∏–≥ {alert['target']} RUB!", reply_markup=main_keyboard())
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ alert –¥–ª—è {user_id}: {e}")
                        continue  # –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏–π alert –≤ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫

                new_alerts.append(alert)
            if new_alerts:
                alerts[user_id] = new_alerts
            else:
                alerts.pop(user_id)


# ===== –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å ¬´–õ—É—á—à–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∏¬ª (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∫–æ–¥–∞) =====
def get_best_exchange_rates():
    response = requests.get(BANKI_URL)
    soup = BeautifulSoup(response.text, 'html.parser')
    banks = []
    
    # –ò—â–µ–º –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
    for item in soup.find_all('div', {'data-test': 'currency__rates-form__result-item'}):
        name_elem = item.find('div', {'data-test': 'currenct--result-item--name'})
        if not name_elem:
            continue
        name = name_elem.text.strip()
        buy_elem = item.find('div', {'data-test': 'currency--result-item---rate-buy'})
        sell_elem = item.find('div', {'data-test': 'currency--result-item---rate-sell'})
        if buy_elem and sell_elem:
            buy_divs = buy_elem.find_all('div')
            sell_divs = sell_elem.find_all('div')
            if buy_divs and sell_divs:
                try:
                    buy = float(buy_divs[-1].text.strip().replace('‚ÇΩ', '').replace(',', '.'))
                    sell = float(sell_divs[-1].text.strip().replace('‚ÇΩ', '').replace(',', '.'))
                    banks.append((name, buy, sell))
                except Exception:
                    continue
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫—É—Ä—Å—É –ø–æ–∫—É–ø–∫–∏ (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
    return sorted(banks, key=lambda x: x[1], reverse=True)

async def best_rates(message: Message):
    banks = get_best_exchange_rates()
    if not banks:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç.", reply_markup=main_keyboard())
        return

    banks = banks[:10]  # –ë–µ—Ä—ë–º —Ç–æ–ø-10
    names = [bank[0] for bank in banks]
    buy_rates = [bank[1] for bank in banks]
    sell_rates = [bank[2] for bank in banks]

    y = np.arange(len(names))
    width = 0.4  # –®–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤

    plt.figure(figsize=(12, 6))
    plt.barh(y - width/2, buy_rates, width, color='green', label='–ü–æ–∫—É–ø–∫–∞')
    plt.barh(y + width/2, sell_rates, width, color='red', label='–ü—Ä–æ–¥–∞–∂–∞')

    plt.yticks(y, names)
    plt.xlabel('–ö—É—Ä—Å (‚ÇΩ)')
    plt.ylabel('–ë–∞–Ω–∫–∏')
    plt.title('–õ—É—á—à–∏–µ –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞ –≤ –ò–∂–µ–≤—Å–∫–µ')
    plt.legend()
    plt.grid(axis='x')

    for i, (buy, sell) in enumerate(zip(buy_rates, sell_rates)):
        plt.text(buy + 0.5, i - width/2, f'{buy:.2f}‚ÇΩ', va='center', fontsize=10)
        plt.text(sell + 0.5, i + width/2, f'{sell:.2f}‚ÇΩ', va='center', fontsize=10)

    buf = BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close()
    await message.reply_photo(buf, reply_markup=main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /best_rates (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è)
@dp.message_handler(commands=['best_rates'])
async def best_rates_command(message: Message):
    await best_rates(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ ¬´üìä –õ—É—á—à–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∏¬ª
@dp.message_handler(lambda message: message.text == "üìä –õ—É—á—à–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∏ –≤ –ò–∂–µ–≤—Å–∫–µ")
async def best_rates_handler(message: Message):
    await best_rates(message)

# ===== –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ =====
async def on_startup(_):
    asyncio.create_task(daily_exchange_rates())
    asyncio.create_task(check_alerts())

# ===== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ =====
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
