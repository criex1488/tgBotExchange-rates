import asyncio
import datetime
import requests
import logging
import matplotlib.pyplot as plt
from io import BytesIO
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup
from aiogram.utils import executor

API_TOKEN = "tgtoken"
CBR_API_URL = "https://www.cbr-xml-daily.ru/daily_json.js"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
user_data = {}  # –î–ª—è —Ç–µ–∫—É—â–∏—Ö –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π
subscribers = set()  # ID –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
alerts = {}  # –ê–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

logging.basicConfig(level=logging.INFO)

# üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        "USD", "EUR", "JPY", "TRY", "RUB",
        "üìä –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è",
        "üîî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫", "üìâ –ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞"
    ]
    keyboard.add(*buttons)
    return keyboard

# üìå –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def start_command(message: Message):
    user_data.pop(message.from_user.id, None)  # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())

# üìå –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã
@dp.message_handler(lambda message: message.text in ["USD", "EUR", "JPY", "TRY", "RUB"])
async def currency_selected(message: Message):
    if message.from_user.id not in user_data:
        user_data[message.from_user.id] = {}

    if "amount" in user_data[message.from_user.id]:
        user_data[message.from_user.id]["to_currency"] = message.text
        await convert_currency(message)
    else:
        user_data[message.from_user.id]["from_currency"] = message.text
        await message.reply(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {message.text}. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")

# üìå –í–≤–æ–¥ —Å—É–º–º—ã
@dp.message_handler(lambda message: message.text.replace(".", "", 1).isdigit() and message.from_user.id in user_data)
async def amount_selected(message: Message):
    user_data[message.from_user.id]["amount"] = float(message.text)

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["USD", "EUR", "JPY", "TRY", "RUB"]
    keyboard.add(*buttons)

    await message.reply("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:", reply_markup=keyboard)

# üìå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã
async def convert_currency(message: Message):
    from_currency = user_data[message.from_user.id]["from_currency"]
    to_currency = user_data[message.from_user.id]["to_currency"]
    amount = user_data[message.from_user.id]["amount"]

    rates = get_exchange_rates()
    if not rates:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return

    result = (amount * rates[from_currency]) / rates[to_currency]
    await message.reply(f"üí± {amount} {from_currency} = {result:.2f} {to_currency}", reply_markup=main_keyboard())

    user_data.pop(message.from_user.id, None)  # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏

# üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤
def get_exchange_rates():
    try:
        response = requests.get(CBR_API_URL)
        response.raise_for_status()
        data = response.json()

        rates = {
            "USD": data["Valute"]["USD"]["Value"],
            "EUR": data["Valute"]["EUR"]["Value"],
            "JPY": data["Valute"]["JPY"]["Value"] / 100,  # –ö—É—Ä—Å –∑–∞ 100 JPY
            "TRY": data["Valute"]["TRY"]["Value"],
            "RUB": 1.0
        }
        return rates
    except requests.RequestException:
        return None

# üìå –ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞ –∑–∞ 7 –¥–Ω–µ–π
@dp.message_handler(lambda message: message.text == "üìâ –ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞")
async def send_currency_graph(message: Message):
    currency = user_data.get(message.from_user.id, {}).get("from_currency", "USD")

    today = datetime.date.today()
    dates = []
    values = []

    for i in range(7):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        date = today - datetime.timedelta(days=i)
        date_str = date.strftime("%Y/%m/%d")
        url = f"https://www.cbr-xml-daily.ru/archive/{date_str}/daily_json.js"

        try:
            response = requests.get(url)
            if response.status_code == 200:
                data = response.json()
                if currency in data["Valute"]:
                    dates.append(date.strftime("%d.%m"))
                    values.append(data["Valute"][currency]["Value"])
        except:
            continue

    if len(dates) < 2:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞.", reply_markup=main_keyboard())
        return

    plt.figure(figsize=(8, 4))
    plt.plot(dates[::-1], values[::-1], marker="o", linestyle="-", label=f"{currency} –∫ RUB")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–ö—É—Ä—Å")
    plt.title(f"üìâ –ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞ {currency} –∫ RUB")
    plt.legend()
    plt.grid(True)

    buf = BytesIO()
    plt.savefig(buf, format="png")
    buf.seek(0)
    await message.reply_photo(buf, reply_markup=main_keyboard())

# üìå –ü–æ–¥–ø–∏—Å–∫–∞
@dp.message_handler(lambda message: message.text == "üìä –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")
async def subscribe_command(message: Message):
    subscribers.add(message.from_user.id)
    await message.reply("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç!", reply_markup=main_keyboard())

@dp.message_handler(lambda message: message.text == "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è")
async def unsubscribe_command(message: Message):
    subscribers.discard(message.from_user.id)
    await message.reply("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.", reply_markup=main_keyboard())

# üìå –ê–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@dp.message_handler(lambda message: message.text == "üîî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫")
async def alert_start(message: Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `/alert USD 100.50`", reply_markup=main_keyboard())

@dp.message_handler(lambda message: message.text.startswith("/alert"))
async def set_alert(message: Message):
    parts = message.text.split()
    if len(parts) < 3:
        await message.reply("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/alert USD 100.50`", reply_markup=main_keyboard())
        return

    currency = parts[1].upper()
    try:
        target_price = float(parts[2])
        alerts[message.from_user.id] = {"currency": currency, "target": target_price}
        await message.reply(f"üîî –ë—É–¥–∏–ª—å–Ω–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {currency} ‚Üí {target_price} RUB", reply_markup=main_keyboard())
    except ValueError:
        await message.reply("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/alert USD 100.50`", reply_markup=main_keyboard())

# üìå –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
async def daily_exchange_rates():
    while True:
        await asyncio.sleep(86400)
        rates = get_exchange_rates()
        if subscribers and rates:
            text = "üìä **–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:**\n" + "\n".join(f"üí∞ {c}: {v:.2f} RUB" for c, v in rates.items())
            for user_id in subscribers:
                await bot.send_message(user_id, text, parse_mode="Markdown", reply_markup=main_keyboard())

async def check_alerts():
    while True:
        await asyncio.sleep(300)
        rates = get_exchange_rates()
        for user_id, alert in alerts.items():
            if rates[alert["currency"]] >= alert["target"]:
                await bot.send_message(user_id, f"üöÄ {alert['currency']} –¥–æ—Å—Ç–∏–≥ {alert['target']} RUB!", reply_markup=main_keyboard())

async def on_startup(_):
    asyncio.create_task(daily_exchange_rates())
    asyncio.create_task(check_alerts())

executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
